// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// har_agg
arma::mat har_agg(arma::vec RM, arma::vec periods, int iNperiods);
RcppExport SEXP _highfrequency_har_agg(SEXP RMSEXP, SEXP periodsSEXP, SEXP iNperiodsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type RM(RMSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type periods(periodsSEXP);
    Rcpp::traits::input_parameter< int >::type iNperiods(iNperiodsSEXP);
    rcpp_result_gen = Rcpp::wrap(har_agg(RM, periods, iNperiods));
    return rcpp_result_gen;
END_RCPP
}
// calcRecVarEq
NumericVector calcRecVarEq(NumericVector par, NumericVector rm);
RcppExport SEXP _highfrequency_calcRecVarEq(SEXP parSEXP, SEXP rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type par(parSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rm(rmSEXP);
    rcpp_result_gen = Rcpp::wrap(calcRecVarEq(par, rm));
    return rcpp_result_gen;
END_RCPP
}
// quadraticKernel
arma::vec quadraticKernel(const arma::vec& x);
RcppExport SEXP _highfrequency_quadraticKernel(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(quadraticKernel(x));
    return rcpp_result_gen;
END_RCPP
}
// tradeIntensityProcessCpp
arma::vec tradeIntensityProcessCpp(arma::vec& time, const double bandwidth);
RcppExport SEXP _highfrequency_tradeIntensityProcessCpp(SEXP timeSEXP, SEXP bandwidthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const double >::type bandwidth(bandwidthSEXP);
    rcpp_result_gen = Rcpp::wrap(tradeIntensityProcessCpp(time, bandwidth));
    return rcpp_result_gen;
END_RCPP
}
// AsymptoticVarianceC
double AsymptoticVarianceC(const arma::colvec& vIn, int iLag);
RcppExport SEXP _highfrequency_AsymptoticVarianceC(SEXP vInSEXP, SEXP iLagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type vIn(vInSEXP);
    Rcpp::traits::input_parameter< int >::type iLag(iLagSEXP);
    rcpp_result_gen = Rcpp::wrap(AsymptoticVarianceC(vIn, iLag));
    return rcpp_result_gen;
END_RCPP
}
// AutomaticLagSelectionC
int AutomaticLagSelectionC(const arma::colvec& vX, double dMu);
RcppExport SEXP _highfrequency_AutomaticLagSelectionC(SEXP vXSEXP, SEXP dMuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type vX(vXSEXP);
    Rcpp::traits::input_parameter< double >::type dMu(dMuSEXP);
    rcpp_result_gen = Rcpp::wrap(AutomaticLagSelectionC(vX, dMu));
    return rcpp_result_gen;
END_RCPP
}
// DriftBurstLoopC
Rcpp::List DriftBurstLoopC(const arma::colvec& vPreAveraged, const arma::colvec& diffedlogprices, const arma::colvec& vTime, const arma::colvec& vTesttime, double iMeanBandwidth, double iVarBandwidth, int iPreAverage, int iAcLag);
RcppExport SEXP _highfrequency_DriftBurstLoopC(SEXP vPreAveragedSEXP, SEXP diffedlogpricesSEXP, SEXP vTimeSEXP, SEXP vTesttimeSEXP, SEXP iMeanBandwidthSEXP, SEXP iVarBandwidthSEXP, SEXP iPreAverageSEXP, SEXP iAcLagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type vPreAveraged(vPreAveragedSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type diffedlogprices(diffedlogpricesSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type vTime(vTimeSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type vTesttime(vTesttimeSEXP);
    Rcpp::traits::input_parameter< double >::type iMeanBandwidth(iMeanBandwidthSEXP);
    Rcpp::traits::input_parameter< double >::type iVarBandwidth(iVarBandwidthSEXP);
    Rcpp::traits::input_parameter< int >::type iPreAverage(iPreAverageSEXP);
    Rcpp::traits::input_parameter< int >::type iAcLag(iAcLagSEXP);
    rcpp_result_gen = Rcpp::wrap(DriftBurstLoopC(vPreAveraged, diffedlogprices, vTime, vTesttime, iMeanBandwidth, iVarBandwidth, iPreAverage, iAcLag));
    return rcpp_result_gen;
END_RCPP
}
// DriftBurstLoopCPAR
Rcpp::List DriftBurstLoopCPAR(const arma::colvec& vPreAveraged, const arma::colvec& diffedlogprices, const arma::colvec& vTime, const arma::colvec& vTesttime, double iMeanBandwidth, double iVarBandwidth, int iPreAverage, int iAcLag, int iCores);
RcppExport SEXP _highfrequency_DriftBurstLoopCPAR(SEXP vPreAveragedSEXP, SEXP diffedlogpricesSEXP, SEXP vTimeSEXP, SEXP vTesttimeSEXP, SEXP iMeanBandwidthSEXP, SEXP iVarBandwidthSEXP, SEXP iPreAverageSEXP, SEXP iAcLagSEXP, SEXP iCoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type vPreAveraged(vPreAveragedSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type diffedlogprices(diffedlogpricesSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type vTime(vTimeSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type vTesttime(vTesttimeSEXP);
    Rcpp::traits::input_parameter< double >::type iMeanBandwidth(iMeanBandwidthSEXP);
    Rcpp::traits::input_parameter< double >::type iVarBandwidth(iVarBandwidthSEXP);
    Rcpp::traits::input_parameter< int >::type iPreAverage(iPreAverageSEXP);
    Rcpp::traits::input_parameter< int >::type iAcLag(iAcLagSEXP);
    Rcpp::traits::input_parameter< int >::type iCores(iCoresSEXP);
    rcpp_result_gen = Rcpp::wrap(DriftBurstLoopCPAR(vPreAveraged, diffedlogprices, vTime, vTesttime, iMeanBandwidth, iVarBandwidth, iPreAverage, iAcLag, iCores));
    return rcpp_result_gen;
END_RCPP
}
// colCumsum
arma::mat colCumsum(const arma::mat& x);
RcppExport SEXP _highfrequency_colCumsum(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(colCumsum(x));
    return rcpp_result_gen;
END_RCPP
}
// refreshTimeMatching
Rcpp::List refreshTimeMatching(const arma::mat& x, arma::vec& idx);
RcppExport SEXP _highfrequency_refreshTimeMatching(SEXP xSEXP, SEXP idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type idx(idxSEXP);
    rcpp_result_gen = Rcpp::wrap(refreshTimeMatching(x, idx));
    return rcpp_result_gen;
END_RCPP
}
// preAveragingReturnsInternal
arma::mat preAveragingReturnsInternal(arma::mat& ret, const int kn);
RcppExport SEXP _highfrequency_preAveragingReturnsInternal(SEXP retSEXP, SEXP knSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type ret(retSEXP);
    Rcpp::traits::input_parameter< const int >::type kn(knSEXP);
    rcpp_result_gen = Rcpp::wrap(preAveragingReturnsInternal(ret, kn));
    return rcpp_result_gen;
END_RCPP
}
// findFirst
arma::uword findFirst(arma::vec& x, const int thresh);
RcppExport SEXP _highfrequency_findFirst(SEXP xSEXP, SEXP threshSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type thresh(threshSEXP);
    rcpp_result_gen = Rcpp::wrap(findFirst(x, thresh));
    return rcpp_result_gen;
END_RCPP
}
// overlap
bool overlap(double min1, double max1, double min2, double max2);
RcppExport SEXP _highfrequency_overlap(SEXP min1SEXP, SEXP max1SEXP, SEXP min2SEXP, SEXP max2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type min1(min1SEXP);
    Rcpp::traits::input_parameter< double >::type max1(max1SEXP);
    Rcpp::traits::input_parameter< double >::type min2(min2SEXP);
    Rcpp::traits::input_parameter< double >::type max2(max2SEXP);
    rcpp_result_gen = Rcpp::wrap(overlap(min1, max1, min2, max2));
    return rcpp_result_gen;
END_RCPP
}
// mSeq
arma::vec mSeq(arma::vec starts, arma::vec ends, double scaleFactor);
RcppExport SEXP _highfrequency_mSeq(SEXP startsSEXP, SEXP endsSEXP, SEXP scaleFactorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type starts(startsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ends(endsSEXP);
    Rcpp::traits::input_parameter< double >::type scaleFactor(scaleFactorSEXP);
    rcpp_result_gen = Rcpp::wrap(mSeq(starts, ends, scaleFactor));
    return rcpp_result_gen;
END_RCPP
}
// cfilter
arma::vec cfilter(arma::vec x, arma::vec filter);
RcppExport SEXP _highfrequency_cfilter(SEXP xSEXP, SEXP filterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type filter(filterSEXP);
    rcpp_result_gen = Rcpp::wrap(cfilter(x, filter));
    return rcpp_result_gen;
END_RCPP
}
// mldivide
arma::vec mldivide(arma::mat A, arma::vec B);
RcppExport SEXP _highfrequency_mldivide(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::vec >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(mldivide(A, B));
    return rcpp_result_gen;
END_RCPP
}
// rollApplyMinWrapper
arma::mat rollApplyMinWrapper(const arma::mat& x);
RcppExport SEXP _highfrequency_rollApplyMinWrapper(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rollApplyMinWrapper(x));
    return rcpp_result_gen;
END_RCPP
}
// rollApplyMedianWrapper
arma::mat rollApplyMedianWrapper(const arma::mat& x);
RcppExport SEXP _highfrequency_rollApplyMedianWrapper(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rollApplyMedianWrapper(x));
    return rcpp_result_gen;
END_RCPP
}
// rollApplyProdWrapper
arma::mat rollApplyProdWrapper(const arma::mat& x, int m);
RcppExport SEXP _highfrequency_rollApplyProdWrapper(SEXP xSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(rollApplyProdWrapper(x, m));
    return rcpp_result_gen;
END_RCPP
}
// tickGrouping_RETURNS
arma::vec tickGrouping_RETURNS(const int end, const int size);
RcppExport SEXP _highfrequency_tickGrouping_RETURNS(SEXP endSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type end(endSEXP);
    Rcpp::traits::input_parameter< const int >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(tickGrouping_RETURNS(end, size));
    return rcpp_result_gen;
END_RCPP
}
// leadLagCpp
arma::vec leadLagCpp(const arma::vec& x, const arma::vec& timestampsX, const arma::vec& y, const arma::vec& timestampsY, const arma::vec lags, const bool normalize);
RcppExport SEXP _highfrequency_leadLagCpp(SEXP xSEXP, SEXP timestampsXSEXP, SEXP ySEXP, SEXP timestampsYSEXP, SEXP lagsSEXP, SEXP normalizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type timestampsX(timestampsXSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type timestampsY(timestampsYSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type lags(lagsSEXP);
    Rcpp::traits::input_parameter< const bool >::type normalize(normalizeSEXP);
    rcpp_result_gen = Rcpp::wrap(leadLagCpp(x, timestampsX, y, timestampsY, lags, normalize));
    return rcpp_result_gen;
END_RCPP
}
// leadLagCppPAR
arma::vec leadLagCppPAR(const arma::vec& x, const arma::vec& timestampsX, const arma::vec& y, const arma::vec& timestampsY, const arma::vec lags, const bool normalize, const int iCores);
RcppExport SEXP _highfrequency_leadLagCppPAR(SEXP xSEXP, SEXP timestampsXSEXP, SEXP ySEXP, SEXP timestampsYSEXP, SEXP lagsSEXP, SEXP normalizeSEXP, SEXP iCoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type timestampsX(timestampsXSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type timestampsY(timestampsYSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type lags(lagsSEXP);
    Rcpp::traits::input_parameter< const bool >::type normalize(normalizeSEXP);
    Rcpp::traits::input_parameter< const int >::type iCores(iCoresSEXP);
    rcpp_result_gen = Rcpp::wrap(leadLagCppPAR(x, timestampsX, y, timestampsY, lags, normalize, iCores));
    return rcpp_result_gen;
END_RCPP
}
// nsmaller
int nsmaller(IntegerVector times, IntegerVector lengths, int start, int end, int max);
RcppExport SEXP _highfrequency_nsmaller(SEXP timesSEXP, SEXP lengthsSEXP, SEXP startSEXP, SEXP endSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type times(timesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type lengths(lengthsSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type end(endSEXP);
    Rcpp::traits::input_parameter< int >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(nsmaller(times, lengths, start, end, max));
    return rcpp_result_gen;
END_RCPP
}
// KK
double KK(double x, int type);
RcppExport SEXP _highfrequency_KK(SEXP xSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(KK(x, type));
    return rcpp_result_gen;
END_RCPP
}
// kernelEstimator
double kernelEstimator(NumericVector a, NumericVector b, int na, int q, int adj, NumericVector type, NumericVector ab, NumericVector ab2);
RcppExport SEXP _highfrequency_kernelEstimator(SEXP aSEXP, SEXP bSEXP, SEXP naSEXP, SEXP qSEXP, SEXP adjSEXP, SEXP typeSEXP, SEXP abSEXP, SEXP ab2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< int >::type na(naSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type adj(adjSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type type(typeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ab(abSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ab2(ab2SEXP);
    rcpp_result_gen = Rcpp::wrap(kernelEstimator(a, b, na, q, adj, type, ab, ab2));
    return rcpp_result_gen;
END_RCPP
}
// pcovcc
NumericVector pcovcc(NumericVector a, NumericVector ap, NumericVector b, NumericVector at, NumericVector atp, NumericVector bt, int na, int nap, int nb, int period);
RcppExport SEXP _highfrequency_pcovcc(SEXP aSEXP, SEXP apSEXP, SEXP bSEXP, SEXP atSEXP, SEXP atpSEXP, SEXP btSEXP, SEXP naSEXP, SEXP napSEXP, SEXP nbSEXP, SEXP periodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ap(apSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type at(atSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type atp(atpSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type bt(btSEXP);
    Rcpp::traits::input_parameter< int >::type na(naSEXP);
    Rcpp::traits::input_parameter< int >::type nap(napSEXP);
    Rcpp::traits::input_parameter< int >::type nb(nbSEXP);
    Rcpp::traits::input_parameter< int >::type period(periodSEXP);
    rcpp_result_gen = Rcpp::wrap(pcovcc(a, ap, b, at, atp, bt, na, nap, nb, period));
    return rcpp_result_gen;
END_RCPP
}
// bacImpliedBetaHYCpp
Rcpp::List bacImpliedBetaHYCpp(arma::mat& components, const arma::mat& missings, arma::mat& componentWeights);
RcppExport SEXP _highfrequency_bacImpliedBetaHYCpp(SEXP componentsSEXP, SEXP missingsSEXP, SEXP componentWeightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type components(componentsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type missings(missingsSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type componentWeights(componentWeightsSEXP);
    rcpp_result_gen = Rcpp::wrap(bacImpliedBetaHYCpp(components, missings, componentWeights));
    return rcpp_result_gen;
END_RCPP
}
// bacImpliedBetaCpp
arma::rowvec bacImpliedBetaCpp(const arma::mat& components, const arma::mat& missings, const arma::mat& componentWeights);
RcppExport SEXP _highfrequency_bacImpliedBetaCpp(SEXP componentsSEXP, SEXP missingsSEXP, SEXP componentWeightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type components(componentsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type missings(missingsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type componentWeights(componentWeightsSEXP);
    rcpp_result_gen = Rcpp::wrap(bacImpliedBetaCpp(components, missings, componentWeights));
    return rcpp_result_gen;
END_RCPP
}
// bacHY
double bacHY(const arma::colvec& component, const arma::colvec& ETF, const arma::uvec& missingComponent, const arma::uvec& missingETF, const arma::colvec& componentWeightings);
RcppExport SEXP _highfrequency_bacHY(SEXP componentSEXP, SEXP ETFSEXP, SEXP missingComponentSEXP, SEXP missingETFSEXP, SEXP componentWeightingsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type component(componentSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type ETF(ETFSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type missingComponent(missingComponentSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type missingETF(missingETFSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type componentWeightings(componentWeightingsSEXP);
    rcpp_result_gen = Rcpp::wrap(bacHY(component, ETF, missingComponent, missingETF, componentWeightings));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_highfrequency_har_agg", (DL_FUNC) &_highfrequency_har_agg, 3},
    {"_highfrequency_calcRecVarEq", (DL_FUNC) &_highfrequency_calcRecVarEq, 2},
    {"_highfrequency_quadraticKernel", (DL_FUNC) &_highfrequency_quadraticKernel, 1},
    {"_highfrequency_tradeIntensityProcessCpp", (DL_FUNC) &_highfrequency_tradeIntensityProcessCpp, 2},
    {"_highfrequency_AsymptoticVarianceC", (DL_FUNC) &_highfrequency_AsymptoticVarianceC, 2},
    {"_highfrequency_AutomaticLagSelectionC", (DL_FUNC) &_highfrequency_AutomaticLagSelectionC, 2},
    {"_highfrequency_DriftBurstLoopC", (DL_FUNC) &_highfrequency_DriftBurstLoopC, 8},
    {"_highfrequency_DriftBurstLoopCPAR", (DL_FUNC) &_highfrequency_DriftBurstLoopCPAR, 9},
    {"_highfrequency_colCumsum", (DL_FUNC) &_highfrequency_colCumsum, 1},
    {"_highfrequency_refreshTimeMatching", (DL_FUNC) &_highfrequency_refreshTimeMatching, 2},
    {"_highfrequency_preAveragingReturnsInternal", (DL_FUNC) &_highfrequency_preAveragingReturnsInternal, 2},
    {"_highfrequency_findFirst", (DL_FUNC) &_highfrequency_findFirst, 2},
    {"_highfrequency_overlap", (DL_FUNC) &_highfrequency_overlap, 4},
    {"_highfrequency_mSeq", (DL_FUNC) &_highfrequency_mSeq, 3},
    {"_highfrequency_cfilter", (DL_FUNC) &_highfrequency_cfilter, 2},
    {"_highfrequency_mldivide", (DL_FUNC) &_highfrequency_mldivide, 2},
    {"_highfrequency_rollApplyMinWrapper", (DL_FUNC) &_highfrequency_rollApplyMinWrapper, 1},
    {"_highfrequency_rollApplyMedianWrapper", (DL_FUNC) &_highfrequency_rollApplyMedianWrapper, 1},
    {"_highfrequency_rollApplyProdWrapper", (DL_FUNC) &_highfrequency_rollApplyProdWrapper, 2},
    {"_highfrequency_tickGrouping_RETURNS", (DL_FUNC) &_highfrequency_tickGrouping_RETURNS, 2},
    {"_highfrequency_leadLagCpp", (DL_FUNC) &_highfrequency_leadLagCpp, 6},
    {"_highfrequency_leadLagCppPAR", (DL_FUNC) &_highfrequency_leadLagCppPAR, 7},
    {"_highfrequency_nsmaller", (DL_FUNC) &_highfrequency_nsmaller, 5},
    {"_highfrequency_KK", (DL_FUNC) &_highfrequency_KK, 2},
    {"_highfrequency_kernelEstimator", (DL_FUNC) &_highfrequency_kernelEstimator, 8},
    {"_highfrequency_pcovcc", (DL_FUNC) &_highfrequency_pcovcc, 10},
    {"_highfrequency_bacImpliedBetaHYCpp", (DL_FUNC) &_highfrequency_bacImpliedBetaHYCpp, 3},
    {"_highfrequency_bacImpliedBetaCpp", (DL_FUNC) &_highfrequency_bacImpliedBetaCpp, 3},
    {"_highfrequency_bacHY", (DL_FUNC) &_highfrequency_bacHY, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_highfrequency(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
